import copy
import numpy as np
import pandas as pd
import pickle


df = pd.read_csv("preprocessed_data.csv")

feature_sets = {"admission_type_id": [[1, 2], [6], [8, 5], [3], [7]],
                "discharge_disposition_id": [[11], [1], [13, 14], [6], [18], [3, 2, 5, 7, 25, 4, 8, 16, 17, 22, 9, 23, 15, 24, 28]],
                "admission_source_id": [[1, 4, 6], [2, 5, 9], [7, 17], [20], [3, 8, 22]],
                "medical_specialty": [["InternalMedicine"], ["Orthopedics", "Orthopedics-Reconstructive", "ObstetricsandGynecology"], ["Cardiology", "Surgery-Neuro"], ["Surgery-Cardiovascular/Thoracic"], ["Surgery-General", "Urology", "Neurology"], ["Family/GeneralPractice", "Psychiatry", "Gynecology", "PhysicalMedicineandRehabilitation", "Otolaryngology", "Radiologist"], ["Nephrology"], ["?", "Gastroenterology", "Emergency/Trauma", 'Pulmonology', 'Obsterics&Gynecology-GynecologicOnco', 'Hematology/Oncology', 'Pediatrics-Endocrinology', 'Surgery-Colon&Rectal', 'Endocrinology', 'Pediatrics-CriticalCare', 'Pediatrics-Pulmonology', 'Pediatrics', 'Anesthesiology-Pediatric', 'Radiology', 'Podiatry', 'Oncology', 'Surgery-Plastic', 'Surgery-Thoracic', 'Psychology', 'InfectiousDiseases', 'Anesthesiology', 'Rheumatology', 'Surgeon', 'Surgery-Vascular', 'Osteopath', 'Surgery-Cardiovascular', 'Hematology', 'Ophthalmology', 'Obstetrics', 'SurgicalSpecialty', 'Pathology', 'Hospitalist', 'OutreachServices']],
                "tolbutamide": [["No"], ["Steady"]],
                "insulin": [["Up"], ["No"], ["Steady"], ["Down"]],
                "change": [["Ch"], ["No"]],
                "diabetesMed": [["Yes"], ["No"]],
                "diag_1": [["428"], ["414", "715", "278"], ["410"], ["722", "786"], ["654", "218", "574", "618", "162"], ["491", "250.6"], ["540", "250", "427", "197", "626", "431", "182", "507", "518"], ["V58"], ['276', '648', '8', '398', '434', '250.7', '157', '999', '682', '402', '572', 'V57', '189', '996', '277', '584', '462', '473', '411', '174', '486', '998', '511', '432', '295', '196', '423', '808', '250.4', '403', '784', '707', '440', '151', '997', '198', '564', '812', '38', '590', '556', '578', '250.32', '433', '569', '185', '536', '255', '250.13', '599', '560', '244', '250.03', '577', '730', '188', '824', '250.8', '332', '562', '291', '296', '510', '401', '263', '438', '70', '642', '625', '571', '738', '593', '250.42', '456', '446', '575', '250.41', '250.02', '820', '515', '780', '250.22', '235', '250.82', '721', '787', '724', '250.83', 'V55', '281', '250.33', '530', '435', '250.12', 'V53', '789', '566', '822', '191', '557', '733', '455', '711', '482', '202', '493', '280', '553', '225', '154', '441', '250.81', '349', '962', '592', '386', '156', '200', '728', '348', '558', '426', '607', '466', '531', '596', '288', '573', '492', '220', '516', '286', '958', '661', '969', '227', '112', '404', '282', '532', '346', '535', '453', '595', '211', '303', '852', '782', '457', '285', '340', '514', '550', '54', '351', '601', '723', '555', '153', '443', '380', '204', '424', '241', '358', '331', '345', '681', '447', '290', '158', '436', '309', '805', '799', '292', '183', '851', '458', '586', '311', '305', '293', '415', '591', '794', '250.11', '79', '429', '658', '729', '585', '444', '727', '284', '823', '644', '481', '821', '413', '416', '437', '756', '275', '512', '781', '420', '368', '522', '294', '825', '135', '995', '304', '250.31', '496', '567', '3', '203', '680', '459', '53', '251', '565', '161', '250.1', '297', '250.43', '576', '355', '850', '287', '250.2', '611', '840', '350', '726', '537', '620', '783', '250.3', '199', '552', '664', '283', '922', '813', '289', '965', '604', '480', '608', '333', '972', '788', '959', '621', '238', '785', '714', '250.23', '710', '47', '844', '233', '42', '478', '253', '250.92', '600', '494', '716', '659', '312', '614', '652', '274', '861', '425', '527', '451', '485', '442', '656', '581', '475', '568', '924', '465', '807', '801', '376', '150', '461', '617', '298', '790', '513', '873', '155', '860', '534', '802', '310', '242', '719', '736', '239', '533', '616', '519', '989', '300', '853', '9', '250.21', '594', '250.93', '421', '430', '528', '490', '396', '171', '660', '967', '695', '252', '152', '718', '205', '977', 'V56', '843', '487', '226', '357', '693', '935', '920', '307', '193', 'V54', '250.01', '394', '847', '627', '966', '378', '945', '725', '867', '933', '327', '338']],
                "diag_2": [["250"], ["401"], ["648"], ["403"], ["414", "272", "518"], ["574", "285", "560"], ["585"], ["491"], ["998", "507", "276", "305", "197", "786", "599", "530", "218"], ['250.01', '250.43', '157', '411', '492', '427', '198', '288', '174', '425', '456', '715', '496', '428', '250.02', '410', '999', '996', '135', '244', '41', '571', '997', '424', '553', '707', '286', '440', '242', '70', 'V45', '250.03', '357', '511', '196', '396', '250.52', '577', '535', '413', '53', '780', '150', '566', '250.6', '486', 'V15', '8', '788', '340', '581', '493', '250.82', '294', '567', '785', '512', '729', '250.51', '280', '618', '444', '38', 'V10', '578', '277', '781', '250.42', '426', '584', '402', '153', '733', '203', '250.41', '250.13', '293', '250.12', '787', '342', '573', '626', '303', '250.53', '458', '710', '415', 'V42', '284', '569', '682', '112', '292', '435', '290', '250.93', '642', '398', '319', '711', 'E878', '446', '255', 'V44', '250.7', '300', '562', '162', '287', '447', '789', '790', '591', '200', '154', '304', '852', '250.83', '250.11', '575', '416', '412', '441', '515', '482', '382', '572', '283', '250.81', '576', '536', '432', '295', 'V12', '466', '721', '590', '813', '368', '783', '250.5', '253', '309', '434', '519', '333', '459', '204', '250.92', '250.4', '420', '345', '433', '537', '205', '722', '437', '784', '714', '211', '263', '202', '397', 'E932', '201', '301', '723', '614', '724', '189', 'E888', '730', '278', '462', 'E939', '805', 'V43', '155', '358', '794', '564', '436', '250.22', '620', '453', '617', '596', '250.8', '625', '478', '731', '451', '404', '681', '558', '279', '281', '531', '443', '568', '799', '337', '311', '719', 'E944', '465', 'E849', '481', '423', '199', '438', '348', '42', '583', '473', '627', '726', '490', '332', '600', '331', '349', '79', '431', '296', '753', 'E935', '386', '728', '344', '716', '289', '191', '873', '850', '611', '738', '616', '455', 'E885', '607', 'V72', '291', '151', 'V58', '550', '510', '185', '592', '138', '362', '298', '821', 'E880', '429', 'E879', 'V49', '696', '233', '782', '275', '595', '250.1', '601', '808', '920', '570', '359', '812', '593', '792', '727', 'V46', '394', '532', 'V64', '557', '718', 'E942', '807', '924', '820', '241', 'V65', '282', '824', '736', '250.2', 'E947', '421', '494', '959', '40', '746', '556', '680', '745', '274', '552', '346', '356', '517', '252', '737', '516', '94', '378', '487', '156', '756', '840', '693', 'V62', '958', '860', '717', '335', '823', 'V54', 'E884', '555', 'E928', '152', '995', '442', '816', '540', '307', '802', '238', '312', '261', '314', '183', '514', 'V63', '327', 'V85', '338', '262']],
                "diag_3": [["250", "401"], ["272"], ["585", "403", "536"], ["278", "276", "305"], ["V10", "198", "414"], ["250.6"], ['255', 'V27', 'V45', '38', '486', '996', '197', '427', '627', '416', '428', '582', 'V43', '250.01', '263', '250.42', '482', '250.41', '781', '998', '568', '682', '618', '250.02', '707', '496', '599', '715', '424', '518', '553', '794', '411', 'V42', '531', '511', '490', '562', '250.8', '250.7', '250.52', '784', '491', '581', '8', '724', '730', '789', '250.82', '999', '41', '493', '250.03', '753', '786', 'E888', '425', '595', '303', '560', '711', '492', '332', '296', '438', '362', '250.4', '654', '244', '737', '625', '681', '250.51', '404', '280', '440', '785', '588', '569', '997', '250.43', '584', '54', '788', '426', '722', '250.92', '196', '461', '535', '787', '284', '458', '648', '780', '285', '593', '413', '664', '564', '201', '356', 'V15', '292', '782', '455', '714', 'E932', '357', '348', '294', '459', 'E878', '437', '733', '507', '250.53', '397', '572', '805', '453', '331', '736', '402', '591', '576', '465', '533', '349', '608', '578', '716', '382', '300', '282', '571', '596', '287', '558', 'E885', '162', '218', '396', 'V14', '570', '433', 'E934', '288', '577', '443', '729', '295', '412', '799', '281', '304', '153', '410', '616', '250.83', '601', '291', '512', '250.5', '598', '337', '574', 'V58', '311', '415', '386', '790', '112', '873', '620', '70', '155', '138', '663', '530', '710', '42', '342', 'E884', '515', '307', '728', '731', '583', '238', '441', '293', '573', '532', '290', '319', '250.13', '250.12', '519', '346', '135', '642', '924', '905', 'E933', '555', '309', 'E879', '446', '444', '344', '252', '813', '394', '301', '473', '575', 'V17', '802', '435', 'V12', '709', 'E935', '250.81', '365', '202', '185', '398', 'V44', '517', '466', '626', '289', '617', '429', '442', '557', '959', 'E942', '94', '920', '345', '79', '516', '586', '600', '242', '592', 'V64', '487', '253', '478', '340', 'E947', '656', '590', 'V09', '250.22', '694', '203', '250.93', '995', '726', '275', '211', 'V18', 'V66', '199', '53', '522', '791', '456', '286', 'E849', '721', 'V65', '423', '647', '537', '351', '274', '719', '434', '494', '157', '174', '812', '150', '447', '692', '552', '389', '454', '792', 'E939', '310', '266', 'E931', '783', '355', 'E930', '369', '611', '283', 'V46', '110', '820', '567', '343', '723', 'V08', '273', '807', '368', '189', '333', 'V54', '277', '659', '621', '378', '298', '840', '521', '745', '204', '696', '727', '358', '477', '556', '188', 'E944', '646', '693', '250.1', 'V49', '614', '205', '462', 'E880', '680', '457', '738', '923', '824', '261', '725', '796', '317', '713', '501', '250.11', 'V63', '686', '808', 'E950', '922', 'V62', 'E812', '916', '154', '312', '514', '183', '327', 'V85', '338']]}


depth_threshold = 5


class Node:

    def __init__(self, records, parent, available_attributes):
        self.records = records
        self.attribute = ""
        self.available_attributes = available_attributes
        self.parent = parent
        self.children = []
        self.label = -1


def ConvertLabels(node):
    labels = []
    with open("labels.pkl", "rb") as file:
        readmitted = pickle.load(file)
        file.close()
    for record in node.records:
        labels.append(readmitted[record])
    return np.array(labels)


def GINI(node):
    records = len(node.records)
    labels = ConvertLabels(node)
    class_1 = (labels == [1, 0, 0])
    class_2 = (labels == [0, 1, 0])
    class_3 = (labels == [0, 0, 1])
    class_2 += class_3
    p1 = np.sum(class_1, axis=1, keepdims=False)
    p2 = np.sum(class_2, axis=1, keepdims=False)
    p1 = np.sum(p1, axis=0, keepdims=False) / 3
    p2 = np.sum(p2, axis=0, keepdims=False) / 3
    p1 /= records
    p2 /= records
    gini = 1 - (pow(p1, 2) + pow(p2, 2))
    return gini


def GINI_split(splits):
    gini_split = 0
    n = 0
    for split in splits:
        n_split = len(split.records)
        gini_split += n_split * GINI(split)
        n += n_split
    gini_split /= n
    return gini_split


def Split(parent, attribute):
    sets = feature_sets[attribute]
    feature = df[attribute]

    parent.attribute = attribute
    parent.children = []
    children_available_attributes = copy.deepcopy(parent.available_attributes)
    children_available_attributes.remove(attribute)

    for s in sets:
        split = []

        for i in range(len(parent.records)):
            if feature[parent.records[i]] in s:
                split.append(parent.records[i])

        parent.children.append(Node(split, parent, children_available_attributes))

    return parent.children


def BuildTree(root, depth):
    if depth >= depth_threshold or len(root.available_attributes) == 0:
        labels = ConvertLabels(root)
        class_1 = (labels == [1, 0, 0])
        class_2 = (labels == [0, 1, 0])
        class_3 = (labels == [0, 0, 1])
        class_2 += class_3
        s1 = np.sum(class_1, axis=1, keepdims=False)
        s2 = np.sum(class_2, axis=1, keepdims=False)
        s1 = np.sum(s1, axis=0, keepdims=False) / 3
        s2 = np.sum(s2, axis=0, keepdims=False) / 3
        if s1 > s2:
            root.label = 0
        else:
            root.label = 1
        root.children = None
        root.attribute = None
        return

    attributes = root.available_attributes
    biggest_gini = -np.inf
    attribute_to_extend = ""
    for attribute in attributes:
        gini_split = GINI_split(Split(root, attribute))
        if gini_split > biggest_gini:
            biggest_gini = gini_split
            attribute_to_extend = attribute

    children = Split(root, attribute_to_extend)
    for child in children:
        BuildTree(child, depth + 1)


def RunDT(root, record_id):
    if root.attribute is None:
        return root.label

    row = df.iloc(0)[record_id]
    feature = row[root.attribute]
    sets = feature_sets[root.attribute]
    for i in range(len(sets)):
        if feature in sets[i]:
            RunDT(root.children[i], record_id)


if __name__ == "__main__":
    print("hello")
